version: 2.1
jobs:
  build:
    docker:
      - image: circleci/php:7.4-node-browsers
      - image: circleci/mysql:5.7
    environment:
      - APP_ENV: testing
      - DB_CONNECTION: circle_test
      - MYSQL_ALLOW_EMPTY_PASSWORD: true;
    steps:
      - checkout
      - run: sudo composer self-update
      - restore_cache:
          key: composer-v1-{{ checksum "./server/composer.lock" }}
      - run: composer install -n --prefer-dist --working-dir=./server/
      - save_cache:
          key: composer-v1-{{ checksum "./server/composer.lock" }}
          paths: ./server/vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./server/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d ./server/node_modules ]; then
              cd server/; npm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./server/package-lock.json" }}
          paths:
            - ./server/node_modules
      - run: cd server/; npm run dev
      - run:
          name: get ready for mysql
          command: |
            sudo apt-get update
            sudo apt-get install default-mysql-client
            sudo docker-php-ext-install pdo_mysql
            dockerize -wait tcp://localhost:3306 -timeout 1m
      - run: cd server/; php artisan migrate
      - run: cd server/; php artisan db:seed
      - run:
          working_directory: server
          name: php test
          command: vendor/bin/phpunit
  deploy:
    docker:
      - image: circleci/php:7.4-node-browsers
    steps:
      - checkout
      - run: sudo composer self-update
      - restore_cache:
          key: composer install -n --no-dev-v1-{{ checksum "./server/composer.lock" }}
      - run: composer install -n --no-dev --prefer-dist --working-dir=./server/
      - save_cache:
          key: composer-no-dev-v1-{{ checksum "./server/composer.lock" }}
          paths:
            - vendor
      - restore_cache:
          key: npm-v1-{{ checksum "./server/package-lock.json" }}
      - run:
          name: npm ci
          command: |
            if [ ! -d ./server/node_modules ]; then
              cd server/; mpm ci
            fi
      - save_cache:
          key: npm-v1-{{ checksum "./server/package-lock.json" }}
          paths:
            - ./server/node_modules
      - run: cd server/; npm run prod
      - run:
          name: archive artifacts
          command: cd server/; zip -ryq tp-ci.zip
      - aws-cli/install
      - run:
          name: upload artifacts to s3
          command: cd server/; aws s3 cp tp-ci.zip s3://${AWS_S3_BUCKET_NAME}
      - run:
          name: deploy to prod
          command: |
            aws deploy create-deployment \
            --application-name tp-ci \
            --deployment-group-name tp-ci \
            --s3-location bucket=${AWS_S3_BUCKET_NAME},key=tp-ci.zip,bundleType=zip

orbs:
  aws-cli: circleci/aws-cli@1.0.0
workflows:
  version: 2
  build_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
          filters:
            branches:
              only:
                - master
